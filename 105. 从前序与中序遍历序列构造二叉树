/**
给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。

输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
输出: [3,9,20,null,null,15,7]

 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* fint_root(int left_pre, int right_pre, int left_in, int right_in, vector<int>& pre, vector<int>& in){
        if(left_pre > right_pre || left_in > right_in) return NULL;
        TreeNode* root = new TreeNode(pre[left_pre]);
        //找中序中root的位置
        int root_index_in = left_in;
        while(root_index_in <= right_in && in[root_index_in] != pre[left_pre]) root_index_in++;

        int left_child_len = root_index_in - left_in;
        root->left = fint_root(left_pre+1, left_pre+left_child_len, left_in, root_index_in-1, pre, in);
        root->right = fint_root(left_pre+left_child_len+1, right_pre, root_index_in+1, right_in, pre, in);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return fint_root(0, preorder.size()-1, 0, inorder.size()-1, preorder, inorder);
    }
};
