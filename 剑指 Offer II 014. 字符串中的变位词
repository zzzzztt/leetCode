/**
给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的某个变位词。

换句话说，第一个字符串的排列之一是第二个字符串的子串 。
**/


/*执行用时：32 ms, 在所有 C++ 提交中击败了13.89%的用户
内存消耗：29.2 MB, 在所有 C++ 提交中击败了7.09%的用户
*/
class Solution {
public:
    bool same(vector<int> s1, vector<int> s2){
        for(int i = 0; i < s1.size(); i++){
            if(s1[i] != s2[i]) return false;
        }
        return true;
    }
    bool checkInclusion(string s1, string s2) {
        vector<int>count_s1(26, 0);
        vector<int>count_s2(26, 0);

        if(s1.length() > s2.length()) return false;
        //记录s1长度滑块中，s1和s2每个字母出现的次数
        for(int i = 0; i < s1.length(); i++){
            count_s1[s1[i] - 'a']++;
            count_s2[s2[i] - 'a']++;
        }
        if(same(count_s1, count_s2)) return true;
        
        int len_s1 = s1.length();
        for(int i = s1.length(); i < s2.length(); i++){
            count_s2[s2[i] - 'a']++;
            count_s2[s2[i - len_s1] - 'a']--;
            if(same(count_s1, count_s2)) return true;
        }

        return false;

    }
};
